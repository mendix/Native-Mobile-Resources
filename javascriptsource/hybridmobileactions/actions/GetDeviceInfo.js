// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @returns {Promise.<MxObject>}
 */
export async function GetDeviceInfo() {
	// BEGIN USER CODE
  if (!cordova.getAppVersion) {
    throw new Error("cordova-plugin-app-version not enabled");
  }
  if (!window.device) {
    throw new Error("cordova-plugin-device not enabled");
  }
  return Promise.all([
  createMxObject("HybridMobileActions.DeviceInfo"),
  cordova.getAppVersion.getAppName(),
  cordova.getAppVersion.getPackageName(),
  cordova.getAppVersion.getVersionNumber()]).
  then(function (results) {
    var mxObject = results[0];
    var appName = results[1];
    var packageName = results[2];
    var versionNumber = results[3];
    mxObject.set("ApplicationName", appName);
    mxObject.set("BundleId", packageName);
    mxObject.set("Version", versionNumber);
    mxObject.set("Manufacturer", window.device.manufacturer);
    mxObject.set("Model", window.device.model);
    mxObject.set("SystemName", window.device.platform);
    mxObject.set("SystemVersion", window.device.version);
    mxObject.set("UniqueId", window.device.uuid);
    mxObject.set("IsEmulator", window.device.isVirtual);
    return mxObject;
  });
  function createMxObject(entity) {
    return new Promise(function (resolve, reject) {
      mx.data.create({
        entity: entity,
        callback: function callback(mxObject) {return resolve(mxObject);},
        error: function error() {return reject("Could not create '".concat(entity, "' object to store device info"));} });

    });
  }
	// END USER CODE
}
