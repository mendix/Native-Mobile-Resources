// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {MxObject} picture - This field is required.
 * @param {"HybridMobileActions.PictureSource.camera"|"HybridMobileActions.PictureSource.imageLibrary"} pictureSource - Select a picture from the library or the camera.
 * @param {"HybridMobileActions.PictureQuality.original"|"HybridMobileActions.PictureQuality.low"|"HybridMobileActions.PictureQuality.medium"|"HybridMobileActions.PictureQuality.high"|"HybridMobileActions.PictureQuality.custom"} pictureQuality - Set to empty to use default value 'medium'.
 * @param {Big} maximumWidth - The picture will be scaled to this maximum pixel width, while maintaing the aspect ratio.
 * @param {Big} maximumHeight - The picture will be scaled to this maximum pixel height, while maintaing the aspect ratio.
 * @returns {Promise.<boolean>}
 */
export async function TakePicture(picture, pictureSource, pictureQuality, maximumWidth, maximumHeight) {
	// BEGIN USER CODE
  // Documentation https://github.com/apache/cordova-plugin-camera
  if (!picture) {
    throw new TypeError("Input parameter 'Picture' is required");
  }
  if (!picture.inheritsFrom("System.FileDocument")) {
    var entity = picture.getEntity();
    throw new TypeError("Entity ".concat(entity, " does not inherit from 'System.FileDocument'"));
  }
  if (pictureQuality === "custom" && !maximumHeight && !maximumWidth) {
    throw new TypeError("Picture quality is set to 'Custom', but no maximum width or height was provided");
  }
  if (!navigator.camera) {
    throw new Error("cordova-plugin-camera not enabled");
  }
  return takePicture().
  then(function (uri) {return getBlob(uri).
    then(function (blob) {return saveDocument(picture, uri, blob);}).
    then(function (result) {
      navigator.camera.cleanup();
      return result;
    });}).
  catch(function (error) {
    if (error === "cancelled") {
      return false;
    }
    throw new Error(error);
  });
  function takePicture() {
    return new Promise(function (resolve, reject) {
      navigator.camera.getPicture(function (imageData) {return resolve(imageData);}, function (error) {
        var message = error ? error.trim().toLowerCase() : "unknown";
        var cancellation = message.includes("no image selected") || message.includes("camera cancelled");
        reject(cancellation ? "cancelled" : message);
      }, getOptions());
    });
  }
  function getBlob(uri) {
    return new Promise(function (resolve, reject) {
      var onSuccess = function onSuccess(fileEntry) {return fileEntry.file(function (blob) {
          var fileReader = new FileReader();
          fileReader.onload = function (event) {return resolve(new Blob([event.target.result]));};
          fileReader.onerror = function (event) {return onError(event.target.error);};
          fileReader.readAsArrayBuffer(blob);
        }, onError);};
      var onError = function onError(error) {return reject(error);};
      window.resolveLocalFileSystemURL(uri, onSuccess, onError);
    });
  }
  function saveDocument(imageObject, uri, blob) {
    return new Promise(function (resolve, reject) {
      var guid = imageObject.getGuid();
      var filename = /[^\/]*$/.exec(uri)[0];
      var onSuccess = function onSuccess() {return resolve(true);};
      var onError = function onError(error) {return reject(error.message);};
      mx.data.saveDocument(guid, filename, {}, blob, onSuccess, onError);
    });
  }
  function getOptions() {
    var size = getPictureSize();
    return {
      targetWidth: size[0],
      targetHeight: size[1],
      quality: 90,
      correctOrientation: true,
      sourceType: pictureSource === "camera" ?
      1 /* CAMERA */ :
      0 /* PHOTOLIBRARY */,
      destinationType: 1 /* FILE_URI */ };

  }
  function getPictureSize() {
    switch (pictureQuality) {
      case "low":
        return [1024, 1024];
      case "medium":
      default:
        return [2048, 2048];
      case "high":
        return [4096, 4096];
      case "custom":
        return [Number(maximumWidth), Number(maximumHeight)];}

  }
	// END USER CODE
}
