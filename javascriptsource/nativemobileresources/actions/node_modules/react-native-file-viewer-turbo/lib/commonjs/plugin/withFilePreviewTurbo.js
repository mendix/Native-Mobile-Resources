"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withFilePreviewTurbo = void 0;
var Expo = _interopRequireWildcard(require("@expo/config-plugins"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const withFilePreviewTurbo = (config, props) => {
  const plugins = [];
  const {
    platforms = []
  } = config;
  const withAndroidManifest = config => Expo.withAndroidManifest(config, config => {
    config.modResults.manifest.queries.push({
      intent: props.mimeTypes.map(mimeType => ({
        action: [{
          $: {
            'android:name': 'android.intent.action.VIEW'
          }
        }],
        data: [{
          $: {
            'android:mimeType': mimeType
          }
        }]
      }))
    });
    return config;
  });
  if (platforms.includes('android')) {
    plugins.push(withAndroidManifest);
  }
  return Expo.withPlugins(config, plugins.map(plugin => [plugin, props]));
};
exports.withFilePreviewTurbo = withFilePreviewTurbo;
//# sourceMappingURL=withFilePreviewTurbo.js.map