// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import fetchBlob from 'rn-fetch-blob';
import { Platform } from 'react-native';

// BEGIN EXTRA CODE
function formatMendixFileUrl(file) {
    var _a;
    return `${mx.remoteUrl}file?guid=${file.getGuid()}&changedDate=${(_a = file.get("changedDate")) !== null && _a !== void 0 ? _a : ""}&name=${encodeURIComponent(file.get("Name"))}`;
}
function formatPath(...pathArgs) {
    return pathArgs.filter(arg => !!arg).join("/");
}
function sanitizeFileName(name) {
    return name.replace(/[<>"?:|*\/\\\u0000-\u001F\u007F]/g, "_");
}
// END EXTRA CODE

/**
 * @param {MxObject} file - This field is required
 * @param {string} filePath - This field is optional
 * @returns {Promise.<boolean>}
 */
export async function DownloadFile(file, filePath) {
	// BEGIN USER CODE
    if (!file) {
        return Promise.reject(new Error("Input parameter 'file' is required"));
    }
    const dirs = fetchBlob.fs.dirs;
    try {
        const fileName = file.get("Name");
        const sanitizedFileName = sanitizeFileName(fileName);
        const baseDir = Platform.OS === 'ios' ? dirs.DocumentDir : dirs.DownloadDir;
        await fetchBlob
            .config({
            path: formatPath(baseDir, filePath, sanitizedFileName)
        })
            .fetch("GET", formatMendixFileUrl(file));
        return Promise.resolve(true);
    }
    catch (err) {
        console.error("error", err);
        return Promise.resolve(false);
    }
	// END USER CODE
}
